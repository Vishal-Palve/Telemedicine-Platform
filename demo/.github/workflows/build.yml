# The name of our workflow, which will be displayed on the Actions tab of your GitHub repository.
name: Java CI with Maven

# This section defines when the workflow will run.
on:
  # Trigger the workflow on push events to the 'main' branch.
  push:
    branches: [ "main" ]
  # Trigger the workflow on pull requests targeting the 'main' branch.
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on. We use the latest version of Ubuntu.
    runs-on: ubuntu-latest

    # A job is a sequence of steps.
    steps:
      # Step 1: Check out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up the correct Java version (JDK 17) for our build.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # A popular, open-source distribution of Java
          cache: 'maven' # This caches the Maven dependencies to speed up future builds

      # Step 3: Build the application and run tests with Maven.
      # The 'mvn clean install' command compiles the code, runs the tests, and packages the application.
      # If any of the tests fail, this step will fail, and the entire workflow run will fail.
      - name: Build and Test with Maven
        run: mvn -B clean install

      # --- Future Deployment Steps Would Go Here ---
      # For example, after a successful build on the 'main' branch, you could add steps to:
      # - Log in to a Docker registry (like Docker Hub or AWS ECR)
      # - Build and tag the Docker image
      # - Push the Docker image to the registry
      # - Trigger a deployment on your cloud provider